{"version":3,"file":"index.mjs","sources":["../src/use-debounce.ts","../src/use-interval.ts","../src/use-title.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function useDebounce(value: any, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","import { useEffect, useRef } from 'react';\n\n/* istanbul ignore next */\n/** keep typescript happy */\nconst noop = () => {};\n\nexport function useInterval(callback: () => void, delay: number | null | false, immediate?: boolean): void {\n  const savedCallback = useRef(noop);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined;\n    const tick = () => savedCallback.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n","import { useEffect } from 'react';\n\n/**\n * Update the document title with provided string\n * @param title is a string.\n */\nexport function useTitle(title: string) {\n  useEffect(() => {\n    document.title = title;\n  }, []);\n}\n"],"names":[],"mappings":";;AAEO,SAAA,WAAA,CAAqB,OAAY,KAAe,EAAA;AAErD,EAAA,MAAM,CAAC,cAAA,EAAgB,iBAAqB,CAAA,GAAA,QAAA,CAAS,KAAK,CAAA,CAAA;AAE1D,EAAA,SAAA,CACE,MAAM;AAEJ,IAAM,MAAA,OAAA,GAAU,WAAW,MAAM;AAC/B,MAAA,iBAAA,CAAkB,KAAK,CAAA,CAAA;AAAA,OACtB,KAAK,CAAA,CAAA;AAKR,IAAA,OAAO,MAAM;AACX,MAAA,YAAA,CAAa,OAAO,CAAA,CAAA;AAAA,KACtB,CAAA;AAAA,GAEF,EAAA,CAAC,KAAO,EAAA,KAAK,CACf,CAAA,CAAA;AAEA,EAAO,OAAA,cAAA,CAAA;AACT;;ACpBA,MAAM,OAAO,MAAM;AAAC,CAAA,CAAA;AAEQ,SAAA,WAAA,CAAA,QAAA,EAAsB,OAA8B,SAA2B,EAAA;AACzG,EAAM,MAAA,aAAA,GAAgB,OAAO,IAAI,CAAA,CAAA;AAGjC,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,aAAA,CAAc,OAAU,GAAA,QAAA,CAAA;AAAA,GACzB,CAAA,CAAA;AAGD,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,CAAC,SAAA;AAAW,MAAA,OAAA;AAChB,IAAI,IAAA,KAAA,KAAU,QAAQ,KAAU,KAAA,KAAA;AAAO,MAAA,OAAA;AACvC,IAAA,aAAA,CAAc,OAAQ,EAAA,CAAA;AAAA,GACxB,EAAG,CAAC,SAAS,CAAC,CAAA,CAAA;AAGd,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,KAAA,KAAU,QAAQ,KAAU,KAAA,KAAA;AAAO,MAAO,OAAA,KAAA,CAAA,CAAA;AAC9C,IAAM,MAAA,IAAA,GAAO,MAAM,aAAA,CAAc,OAAQ,EAAA,CAAA;AACzC,IAAM,MAAA,EAAA,GAAK,WAAY,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AAClC,IAAO,OAAA,MAAM,cAAc,EAAE,CAAA,CAAA;AAAA,GAC/B,EAAG,CAAC,KAAK,CAAC,CAAA,CAAA;AACZ;;ACtBO,SAAA,QAAA,CAAkB,KAAe,EAAA;AACtC,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,QAAA,CAAS,KAAQ,GAAA,KAAA,CAAA;AAAA,GACnB,EAAG,EAAE,CAAA,CAAA;AACP;;;;"}